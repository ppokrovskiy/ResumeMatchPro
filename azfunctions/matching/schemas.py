from datetime import datetime
from enum import Enum
from uuid import UUID, uuid4

from pydantic import BaseModel, Field, model_validator
from typing import List


class FileType(str, Enum):
    CV = "CV"
    JD = "JD"
    
    
class MatchingBaseModel(BaseModel):
    # add created_at and updated_at fields autogenerated with current datetime at the moment of creation
    created_at: datetime = Field(default_factory=datetime.now)
    updated_at: datetime = Field(default_factory=datetime.now)
    
    # model_config = ConfigDict(
    #     validate_assignment=True,
    # )
    
    @model_validator(mode='after')
    @classmethod
    def update_updated_at(cls, values):
        values.updated_at = datetime.now()
        return values
    
    
class MatchingRequestBase(MatchingBaseModel):
    id: UUID = Field(default_factory=uuid4)
    filename: str
    type: FileType
    user_id: str
    url: str
    
class MatchingRequestMessage(MatchingRequestBase):
    pass

class MatchingRequestModel(MatchingBaseModel):
    id: UUID
    filename: str
    type: FileType
    user_id: str
    url: str
    text: str


class FileModel(MatchingBaseModel):
    id: UUID = Field(default_factory=uuid4)
    filename: str
    type: FileType
    user_id: str
    url: str
    text: str
    
class JD_Requirements(MatchingBaseModel):
    id: UUID = Field(default_factory=uuid4)
    skills: List[str]
    experience: List[str]
    education: List[str]
    
    
class Candidate_Capabilities(MatchingBaseModel):
    id: UUID = Field(default_factory=uuid4)
    skills: List[str]
    experience: List[str]
    education: List[str]
    
    
class CV_Match(MatchingBaseModel):
    id: UUID = Field(default_factory=uuid4)
    skills_match: List[str]
    experience_match: List[str]
    education_match: List[str]
    gaps: List[str]
    
    
class MatchingResultModel(MatchingBaseModel):
    id: UUID = Field(default_factory=uuid4)
    user_id: str
    cv: FileModel
    jd: FileModel
    jd_requirements: JD_Requirements
    candidate_capabilities: Candidate_Capabilities
    cv_match: CV_Match
    overall_match_percentage: float
    
    # function to create model from json by creating nested models first
    @classmethod
    def from_json(cls, json_data):
        cv = FileModel(**json_data['cv'])
        jd = FileModel(**json_data['jd'])
        jd_requirements = JD_Requirements(**json_data['JD_Requirements'])
        candidate_capabilities = Candidate_Capabilities(**json_data['Candidate_Capabilities'])
        cv_match = CV_Match(**json_data['cv_match'])
        return cls(cv=cv, jd=jd, jd_requirements=jd_requirements, candidate_capabilities=candidate_capabilities, cv_match=cv_match, **json_data)
